#!/home/jyp/.miniconda3/envs/lab/bin/python
import rospy
from open_sftp import open_sftp
from object_base import *
from config import *


def create_obj(object_split) -> ObjectBase:
    global type_config_map
    return type_config_map[object_split[1]][0](object_split)


class Visualizer:
    def __init__(self):
        rospy.init_node('pyviz_node', anonymous=True)
        self.type_pub_map = {}
        self.type_msg_map = {}
        for t, config in type_config_map.items():
            self.type_msg_map[t] = None
            self.type_pub_map[t] = rospy.Publisher(
                t, config[0].msg_type(), queue_size=10)
        self.rate = rospy.Rate(10)  # 10hz
        self.type = rospy.get_param('~type')
        self.path = rospy.get_param('~path')
        self.objects = {}
        self.open_method = {'local': open, 'sftp': open_sftp}

    def draw(self):
        with self.open_method[self.type](self.path) as file:
            num_fresh = 0
            buffer = None
            object_char_list = None
            start = False
            while not rospy.is_shutdown():
                num_fresh += 1
                change = False
                while True:
                    buffer = file.read(65536)
                    if len(buffer) == 0:
                        break
                    change = True
                    for c in buffer:
                        if type(c) is not str:
                            c = chr(c)
                        if not start and c == '#':
                            start = True
                            object_char_list = []
                        elif start and c == '&':
                            start = False
                            object_str = ''.join(object_char_list)
                            object_split = object_str.split(',')
                            new_object = create_obj(object_split)
                            self.objects[new_object.id] = new_object
                        elif start:
                            object_char_list.append(c)
                if num_fresh % 10 == 0 or change:
                    ts = rospy.Time.now()
                    # generate msgs
                    for t, config in type_config_map.items():
                        self.type_msg_map[t] = config[0].create_msg(
                            ts, *config[1])
                    # update msgs with objs
                    for _, obj in self.objects.items():
                        obj.draw(self.type_msg_map[obj.type])
                    # publish msgs
                    for t, pub in self.type_pub_map.items():
                        if isinstance(self.type_msg_map[t], MessageWithParam):
                            pub.publish(self.type_msg_map[t].msg)
                        else:
                            pub.publish(self.type_msg_map[t])

                self.rate.sleep()


if __name__ == '__main__':
    try:
        vis = Visualizer()
        vis.draw()
    except rospy.ROSInterruptException:
        pass
